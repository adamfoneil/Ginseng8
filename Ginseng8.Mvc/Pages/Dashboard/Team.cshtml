@page "/Dashboard/Team/{id?}"
@model Ginseng.Mvc.Pages.Work.TeamModel
@{
    ViewData["Title"] = "Team";
}

<ul class="nav nav-pills nav-fill nav-justified mb-3 justify-content-center">
    @foreach (var user in Model.Users)
    {
        string activeClass = (user.UserId == Model.FilterUserId) ? "active" : string.Empty;
        <li>
            <a asp-page="/Dashboard/Team" asp-route-id="@user.UserId" class="nav-link @activeClass">@user.UserName</a>            
        </li>
    }
</ul>

@if (Model.FilterUserId == 0)
{
    <div>
        <p class="text-center">Please click on someone's name to view their work.</p>
    </div>
    return;
}

<div id="accordion">    
    @foreach (var milestoneGrp in Model.WorkItems.OrderBy(row => row.SortMilestoneDate).GroupBy(row => row.MilestoneId))
    {
        var milestoneItem = milestoneGrp.First();

        <partial name="Items/_MilestoneHeader" model="milestoneItem" />

        <div class="ml-3">
            <partial name="Items/_Load" model="Model.GetLoadView(milestoneGrp)" />
        </div>

        @foreach (var appGrp in milestoneGrp.OrderBy(row => Model.GroupingOption.GroupSortFunction(row)).GroupBy(row => Model.GroupingOption.GroupValueFunction(row)))
        {
	        <h5 class="ml-3">@Model.GroupingOption.GroupHeadingFunction(appGrp.First())</h5>
            <div id="app-@appGrp.Key-@milestoneGrp.Key" class="milestone-items" data-milestone-id="@milestoneGrp.Key">
            <div class="ml-3 sortable" data-user-id="@(Model.FilterUserId)" data-group-field="@Model.GroupingOption.FieldNameFunction(appGrp.First())" data-group-value="@appGrp.Key">
                @foreach (var item in appGrp)
                {
                    <partial name="Items/_Card" model="new WorkItemCardView() { WorkItem = item, Dropdowns = Model.Dropdowns, SelectedLabels = Model.SelectedLabels[item.Id], UserId = Model.UserId, Comments = Model.Comments[item.Id], AssignToUsers = Model.AssignToUsers, TitleViewField = Model.GroupingOption.TitleViewField }" />
                }
                @await Html.PartialAsync("Items/_InsertItem", new InsertItemView(new Dictionary<string, int>()
                {
                    { Model.GroupingOption.FieldNameFunction(appGrp.First()), appGrp.Key },                    
                    { "milestoneId", milestoneGrp.Key },
                    { Model.UserIdColumns[Model.FilterUserId].UserIdColumn, Model.FilterUserId },
                    { "activityId", Model.UserIdColumns[Model.FilterUserId].ActivityId }
                }) { Dropdowns = Model.Dropdowns, UseApplications = appGrp.First().UseApplications, AppendIfMissing = new Dictionary<string, int>()
                {
                    { "teamId", appGrp.First().TeamId },
                    { "applicationId", appGrp.First().ApplicationId }
                }})
                </div>
            </div>
        }
    }

    <p class="text-center">@Model.WorkItems.Count() work items shown</p>
                    
    @{ var recentlyClosed = Model.ClosedItems[Model.FilterUserId].Take(10); }

    @if (recentlyClosed.Any())
    {
        <partial name="Items/_RecentlyClosed" model="recentlyClosed" />
    }
</div>

@section Scripts {
    <script type="text/javascript">
        showFirstTab = false;
    </script>
}